// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const copyFlashcardDeck = `-- name: CopyFlashcardDeck :one
WITH NewDeck AS (
INSERT INTO "FlashcardDeck" (
    title,
    max_review_limit_per_day,
    graduating_interval,
    learning_steps,
    new_cards_limit_per_day,
    easy_interval,
    learning_step_no
)
SELECT
    title,
    max_review_limit_per_day,
    graduating_interval,
    learning_steps,
    new_cards_limit_per_day,
    easy_interval,
    learning_step_no
FROM "FlashcardDeck" AS old_deck
WHERE old_deck.id = $1
    RETURNING id AS new_deck_id
)
SELECT new_deck_id FROM NewDeck
`

func (q *Queries) CopyFlashcardDeck(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, copyFlashcardDeck, id)
	var new_deck_id int32
	err := row.Scan(&new_deck_id)
	return new_deck_id, err
}

const copyFlashcardsForDeck = `-- name: CopyFlashcardsForDeck :many
WITH CopiedFlashcards AS (
INSERT INTO "Flashcard" (
    front_side, rear_side, front_audio, rear_audio, front_image, rear_image,
    review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
)
SELECT
    front_side, rear_side, front_audio, rear_audio, front_image, rear_image,
    review_factor, review_interval, due_date, is_new, learning_step_no, $2  -- new deck ID
FROM "Flashcard" AS old_flashcard
WHERE old_flashcard.deck_id = $1  -- old deck ID
    RETURNING id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image,
              review_factor, review_interval, due_date, is_new, deck_id
)
SELECT id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id FROM CopiedFlashcards
`

type CopyFlashcardsForDeckParams struct {
	DeckID         int32
	LearningStepNo int32
}

type CopyFlashcardsForDeckRow struct {
	ID             int32
	FrontSide      string
	RearSide       string
	FrontAudio     pgtype.Text
	RearAudio      pgtype.Text
	FrontImage     pgtype.Text
	RearImage      pgtype.Text
	ReviewFactor   int32
	ReviewInterval int32
	DueDate        int64
	IsNew          bool
	DeckID         int32
}

func (q *Queries) CopyFlashcardsForDeck(ctx context.Context, arg CopyFlashcardsForDeckParams) ([]CopyFlashcardsForDeckRow, error) {
	rows, err := q.db.Query(ctx, copyFlashcardsForDeck, arg.DeckID, arg.LearningStepNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CopyFlashcardsForDeckRow
	for rows.Next() {
		var i CopyFlashcardsForDeckRow
		if err := rows.Scan(
			&i.ID,
			&i.FrontSide,
			&i.RearSide,
			&i.FrontAudio,
			&i.RearAudio,
			&i.FrontImage,
			&i.RearImage,
			&i.ReviewFactor,
			&i.ReviewInterval,
			&i.DueDate,
			&i.IsNew,
			&i.DeckID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCopyFlashcardDecKMapping = `-- name: CreateCopyFlashcardDecKMapping :one
INSERT INTO "FlashcardDeckToCopiers" (deck_id, user_id, copied_deck_id)
VALUES ($1, $3, $2) RETURNING id, deck_id, user_id, copied_deck_id
`

type CreateCopyFlashcardDecKMappingParams struct {
	DeckID       int32
	CopiedDeckID int32
	UserID       string
}

func (q *Queries) CreateCopyFlashcardDecKMapping(ctx context.Context, arg CreateCopyFlashcardDecKMappingParams) (FlashcardDeckToCopier, error) {
	row := q.db.QueryRow(ctx, createCopyFlashcardDecKMapping, arg.DeckID, arg.CopiedDeckID, arg.UserID)
	var i FlashcardDeckToCopier
	err := row.Scan(
		&i.ID,
		&i.DeckID,
		&i.UserID,
		&i.CopiedDeckID,
	)
	return i, err
}

const createFlashcard = `-- name: CreateFlashcard :one
INSERT INTO "Flashcard" (
                             front_side, rear_side, deck_id, review_factor, review_interval, due_date, is_new, front_audio, rear_audio, front_image, rear_image, learning_step_no
) VALUES (
          $1,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, 0
         ) RETURNING id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
`

type CreateFlashcardParams struct {
	FrontSide      string
	RearSide       string
	DeckID         int32
	ReviewFactor   int32
	ReviewInterval int32
	DueDate        int64
	IsNew          bool
	FrontAudio     pgtype.Text
	RearAudio      pgtype.Text
	FrontImage     pgtype.Text
	RearImage      pgtype.Text
}

func (q *Queries) CreateFlashcard(ctx context.Context, arg CreateFlashcardParams) (Flashcard, error) {
	row := q.db.QueryRow(ctx, createFlashcard,
		arg.FrontSide,
		arg.RearSide,
		arg.DeckID,
		arg.ReviewFactor,
		arg.ReviewInterval,
		arg.DueDate,
		arg.IsNew,
		arg.FrontAudio,
		arg.RearAudio,
		arg.FrontImage,
		arg.RearImage,
	)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.FrontSide,
		&i.RearSide,
		&i.FrontAudio,
		&i.RearAudio,
		&i.FrontImage,
		&i.RearImage,
		&i.ReviewFactor,
		&i.ReviewInterval,
		&i.DueDate,
		&i.IsNew,
		&i.DeckID,
		&i.LearningStepNo,
	)
	return i, err
}

const createFlashcardDeck = `-- name: CreateFlashcardDeck :one
WITH new_deck AS (
INSERT INTO "FlashcardDeck" (title,max_review_limit_per_day,graduating_interval,learning_steps,new_cards_limit_per_day,easy_interval)
VALUES ($1,$3,$4,$5,$6,$7)
    RETURNING id
    )
INSERT INTO "FlashcardDeckToEditors" (deck_id, user_id)
SELECT id, $2
FROM new_deck RETURNING id, deck_id, user_id
`

type CreateFlashcardDeckParams struct {
	Title                string
	UserID               string
	MaxReviewLimitPerDay int32
	GraduatingInterval   int32
	LearningSteps        string
	NewCardsLimitPerDay  int32
	EasyInterval         int32
}

func (q *Queries) CreateFlashcardDeck(ctx context.Context, arg CreateFlashcardDeckParams) (FlashcardDeckToEditor, error) {
	row := q.db.QueryRow(ctx, createFlashcardDeck,
		arg.Title,
		arg.UserID,
		arg.MaxReviewLimitPerDay,
		arg.GraduatingInterval,
		arg.LearningSteps,
		arg.NewCardsLimitPerDay,
		arg.EasyInterval,
	)
	var i FlashcardDeckToEditor
	err := row.Scan(&i.ID, &i.DeckID, &i.UserID)
	return i, err
}

const createFlashcardReview = `-- name: CreateFlashcardReview :one
INSERT INTO "DailyCardReviews" (  "card_id" ,
                                  "deck_id",
                                  "old_learning_step_no",
                                  "old_is_new",
                                  "old_due_date",
                                  "is_review_complete", "review_id")
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, card_id, deck_id, review_id, old_learning_step_no, old_is_new, is_review_complete, old_due_date
`

type CreateFlashcardReviewParams struct {
	CardID            int32
	DeckID            int32
	OldLearningStepNo int32
	OldIsNew          bool
	OldDueDate        int64
	IsReviewComplete  bool
	ReviewID          int32
}

func (q *Queries) CreateFlashcardReview(ctx context.Context, arg CreateFlashcardReviewParams) (DailyCardReview, error) {
	row := q.db.QueryRow(ctx, createFlashcardReview,
		arg.CardID,
		arg.DeckID,
		arg.OldLearningStepNo,
		arg.OldIsNew,
		arg.OldDueDate,
		arg.IsReviewComplete,
		arg.ReviewID,
	)
	var i DailyCardReview
	err := row.Scan(
		&i.ID,
		&i.CardID,
		&i.DeckID,
		&i.ReviewID,
		&i.OldLearningStepNo,
		&i.OldIsNew,
		&i.IsReviewComplete,
		&i.OldDueDate,
	)
	return i, err
}

const createReviewGenerated = `-- name: CreateReviewGenerated :one
INSERT INTO "ReviewGenerated" (
    date
) VALUES (
             $1
         ) RETURNING id, date
`

func (q *Queries) CreateReviewGenerated(ctx context.Context, date int64) (ReviewGenerated, error) {
	row := q.db.QueryRow(ctx, createReviewGenerated, date)
	var i ReviewGenerated
	err := row.Scan(&i.ID, &i.Date)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "User"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const flashcardReview = `-- name: FlashcardReview :one
UPDATE "Flashcard"
SET review_factor = $2, review_interval = $3, due_date = $4, is_new = $5
WHERE id = $1 RETURNING id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
`

type FlashcardReviewParams struct {
	ID             int32
	ReviewFactor   int32
	ReviewInterval int32
	DueDate        int64
	IsNew          bool
}

func (q *Queries) FlashcardReview(ctx context.Context, arg FlashcardReviewParams) (Flashcard, error) {
	row := q.db.QueryRow(ctx, flashcardReview,
		arg.ID,
		arg.ReviewFactor,
		arg.ReviewInterval,
		arg.DueDate,
		arg.IsNew,
	)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.FrontSide,
		&i.RearSide,
		&i.FrontAudio,
		&i.RearAudio,
		&i.FrontImage,
		&i.RearImage,
		&i.ReviewFactor,
		&i.ReviewInterval,
		&i.DueDate,
		&i.IsNew,
		&i.DeckID,
		&i.LearningStepNo,
	)
	return i, err
}

const getAFlashcard = `-- name: GetAFlashcard :many
SELECT id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
FROM "Flashcard"
WHERE deck_id = $1
LIMIT $2
OFFSET $3
`

type GetAFlashcardParams struct {
	DeckID int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetAFlashcard(ctx context.Context, arg GetAFlashcardParams) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getAFlashcard, arg.DeckID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.FrontSide,
			&i.RearSide,
			&i.FrontAudio,
			&i.RearAudio,
			&i.FrontImage,
			&i.RearImage,
			&i.ReviewFactor,
			&i.ReviewInterval,
			&i.DueDate,
			&i.IsNew,
			&i.DeckID,
			&i.LearningStepNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAFlashcardDeck = `-- name: GetAFlashcardDeck :one
    SELECT id, title, max_review_limit_per_day, graduating_interval, learning_steps, new_cards_limit_per_day, easy_interval FROM "FlashcardDeck" WHERE id = $1
`

func (q *Queries) GetAFlashcardDeck(ctx context.Context, id int32) (FlashcardDeck, error) {
	row := q.db.QueryRow(ctx, getAFlashcardDeck, id)
	var i FlashcardDeck
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.MaxReviewLimitPerDay,
		&i.GraduatingInterval,
		&i.LearningSteps,
		&i.NewCardsLimitPerDay,
		&i.EasyInterval,
	)
	return i, err
}

const getAUseWithId = `-- name: GetAUseWithId :one
SELECT id, user_id, name, user_type, email_id, phone, profile_picture, password, is_password_set, register_method, is_verified, is_user_id_set, is_phone_set, past_experiences FROM "User"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAUseWithId(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getAUseWithId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UserType,
		&i.EmailID,
		&i.Phone,
		&i.ProfilePicture,
		&i.Password,
		&i.IsPasswordSet,
		&i.RegisterMethod,
		&i.IsVerified,
		&i.IsUserIDSet,
		&i.IsPhoneSet,
		&i.PastExperiences,
	)
	return i, err
}

const getAUserWithUserId = `-- name: GetAUserWithUserId :one
SELECT id, user_id, name, user_type, email_id, phone, profile_picture, password, is_password_set, register_method, is_verified, is_user_id_set, is_phone_set, past_experiences FROM "User"
WHERE user_id = $1
`

func (q *Queries) GetAUserWithUserId(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getAUserWithUserId, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UserType,
		&i.EmailID,
		&i.Phone,
		&i.ProfilePicture,
		&i.Password,
		&i.IsPasswordSet,
		&i.RegisterMethod,
		&i.IsVerified,
		&i.IsUserIDSet,
		&i.IsPhoneSet,
		&i.PastExperiences,
	)
	return i, err
}

const getAllFlashcards = `-- name: GetAllFlashcards :many
SELECT id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
FROM "Flashcard"
WHERE deck_id = $1
LIMIT $2
OFFSET $3
`

type GetAllFlashcardsParams struct {
	DeckID int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllFlashcards(ctx context.Context, arg GetAllFlashcardsParams) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getAllFlashcards, arg.DeckID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.FrontSide,
			&i.RearSide,
			&i.FrontAudio,
			&i.RearAudio,
			&i.FrontImage,
			&i.RearImage,
			&i.ReviewFactor,
			&i.ReviewInterval,
			&i.DueDate,
			&i.IsNew,
			&i.DeckID,
			&i.LearningStepNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlashcardDecks = `-- name: GetFlashcardDecks :many
SELECT id, title, max_review_limit_per_day, graduating_interval, learning_steps, new_cards_limit_per_day, easy_interval
FROM "FlashcardDeck"
WHERE id IN (
    SELECT deck_id
    FROM "FlashcardDeckToEditors"
    WHERE user_id = $1
)
ORDER BY id
    LIMIT $2
OFFSET $3
`

type GetFlashcardDecksParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) GetFlashcardDecks(ctx context.Context, arg GetFlashcardDecksParams) ([]FlashcardDeck, error) {
	rows, err := q.db.Query(ctx, getFlashcardDecks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlashcardDeck
	for rows.Next() {
		var i FlashcardDeck
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.MaxReviewLimitPerDay,
			&i.GraduatingInterval,
			&i.LearningSteps,
			&i.NewCardsLimitPerDay,
			&i.EasyInterval,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGraduateFlashcard = `-- name: GetGraduateFlashcard :many
SELECT id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
FROM "Flashcard"
WHERE deck_id = $1
  AND is_new = true
    AND learning_step_no > 0
    LIMIT $2
OFFSET $3
`

type GetGraduateFlashcardParams struct {
	DeckID int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetGraduateFlashcard(ctx context.Context, arg GetGraduateFlashcardParams) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getGraduateFlashcard, arg.DeckID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.FrontSide,
			&i.RearSide,
			&i.FrontAudio,
			&i.RearAudio,
			&i.FrontImage,
			&i.RearImage,
			&i.ReviewFactor,
			&i.ReviewInterval,
			&i.DueDate,
			&i.IsNew,
			&i.DeckID,
			&i.LearningStepNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewFlashcard = `-- name: GetNewFlashcard :many
SELECT id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
FROM "Flashcard"
WHERE deck_id = $1
AND is_new = true
    AND learning_step_no = 0
LIMIT $2
OFFSET $3
`

type GetNewFlashcardParams struct {
	DeckID int32
	Limit  int32
	Offset int32
}

func (q *Queries) GetNewFlashcard(ctx context.Context, arg GetNewFlashcardParams) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getNewFlashcard, arg.DeckID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.FrontSide,
			&i.RearSide,
			&i.FrontAudio,
			&i.RearAudio,
			&i.FrontImage,
			&i.RearImage,
			&i.ReviewFactor,
			&i.ReviewInterval,
			&i.DueDate,
			&i.IsNew,
			&i.DeckID,
			&i.LearningStepNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewFlashcard = `-- name: GetReviewFlashcard :many
SELECT id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
FROM "Flashcard"
WHERE deck_id = $1
  AND is_new = false
  AND due_date <= $2
    AND learning_step_no = -1
    LIMIT $3
OFFSET $4
`

type GetReviewFlashcardParams struct {
	DeckID  int32
	DueDate int64
	Limit   int32
	Offset  int32
}

func (q *Queries) GetReviewFlashcard(ctx context.Context, arg GetReviewFlashcardParams) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getReviewFlashcard,
		arg.DeckID,
		arg.DueDate,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.ID,
			&i.FrontSide,
			&i.RearSide,
			&i.FrontAudio,
			&i.RearAudio,
			&i.FrontImage,
			&i.RearImage,
			&i.ReviewFactor,
			&i.ReviewInterval,
			&i.DueDate,
			&i.IsNew,
			&i.DeckID,
			&i.LearningStepNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, user_id, name, user_type, email_id, phone, profile_picture, password, is_password_set, register_method, is_verified, is_user_id_set, is_phone_set, past_experiences FROM "User"
LIMIT 5
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.UserType,
			&i.EmailID,
			&i.Phone,
			&i.ProfilePicture,
			&i.Password,
			&i.IsPasswordSet,
			&i.RegisterMethod,
			&i.IsVerified,
			&i.IsUserIDSet,
			&i.IsPhoneSet,
			&i.PastExperiences,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertInstructor = `-- name: InsertInstructor :one
INSERT INTO "User" (
                    name, user_id, email_id, phone, past_experiences, user_type
) VALUES (
          $1, $2, $3, $4, $5, 'Instructor'
         ) RETURNING id, user_id, name, user_type, email_id, phone, profile_picture, password, is_password_set, register_method, is_verified, is_user_id_set, is_phone_set, past_experiences
`

type InsertInstructorParams struct {
	Name            string
	UserID          string
	EmailID         string
	Phone           string
	PastExperiences pgtype.Text
}

func (q *Queries) InsertInstructor(ctx context.Context, arg InsertInstructorParams) (User, error) {
	row := q.db.QueryRow(ctx, insertInstructor,
		arg.Name,
		arg.UserID,
		arg.EmailID,
		arg.Phone,
		arg.PastExperiences,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UserType,
		&i.EmailID,
		&i.Phone,
		&i.ProfilePicture,
		&i.Password,
		&i.IsPasswordSet,
		&i.RegisterMethod,
		&i.IsVerified,
		&i.IsUserIDSet,
		&i.IsPhoneSet,
		&i.PastExperiences,
	)
	return i, err
}

const insertLearner = `-- name: InsertLearner :one
INSERT INTO "User" (
    name, user_id, email_id, phone, user_type
) VALUES (
             $1, $2, $3, $4, 'Learner'
         ) RETURNING id, user_id, name, user_type, email_id, phone, profile_picture, password, is_password_set, register_method, is_verified, is_user_id_set, is_phone_set, past_experiences
`

type InsertLearnerParams struct {
	Name    string
	UserID  string
	EmailID string
	Phone   string
}

func (q *Queries) InsertLearner(ctx context.Context, arg InsertLearnerParams) (User, error) {
	row := q.db.QueryRow(ctx, insertLearner,
		arg.Name,
		arg.UserID,
		arg.EmailID,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.UserType,
		&i.EmailID,
		&i.Phone,
		&i.ProfilePicture,
		&i.Password,
		&i.IsPasswordSet,
		&i.RegisterMethod,
		&i.IsVerified,
		&i.IsUserIDSet,
		&i.IsPhoneSet,
		&i.PastExperiences,
	)
	return i, err
}

const updateFlashcard = `-- name: UpdateFlashcard :one
UPDATE "Flashcard"
SET front_side = $2, rear_side = $3, front_audio = $4, rear_audio = $5,  front_image = $6, rear_image = $7, review_factor = $8, review_interval = $9, is_new = $10, due_date = $11, learning_step_no = $12
WHERE id = $1 RETURNING id, front_side, rear_side, front_audio, rear_audio, front_image, rear_image, review_factor, review_interval, due_date, is_new, deck_id, learning_step_no
`

type UpdateFlashcardParams struct {
	ID             int32
	FrontSide      string
	RearSide       string
	FrontAudio     pgtype.Text
	RearAudio      pgtype.Text
	FrontImage     pgtype.Text
	RearImage      pgtype.Text
	ReviewFactor   int32
	ReviewInterval int32
	IsNew          bool
	DueDate        int64
	LearningStepNo int32
}

func (q *Queries) UpdateFlashcard(ctx context.Context, arg UpdateFlashcardParams) (Flashcard, error) {
	row := q.db.QueryRow(ctx, updateFlashcard,
		arg.ID,
		arg.FrontSide,
		arg.RearSide,
		arg.FrontAudio,
		arg.RearAudio,
		arg.FrontImage,
		arg.RearImage,
		arg.ReviewFactor,
		arg.ReviewInterval,
		arg.IsNew,
		arg.DueDate,
		arg.LearningStepNo,
	)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.FrontSide,
		&i.RearSide,
		&i.FrontAudio,
		&i.RearAudio,
		&i.FrontImage,
		&i.RearImage,
		&i.ReviewFactor,
		&i.ReviewInterval,
		&i.DueDate,
		&i.IsNew,
		&i.DeckID,
		&i.LearningStepNo,
	)
	return i, err
}
